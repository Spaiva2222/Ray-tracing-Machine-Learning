
import numpy as np
import cmath as math

import matplotlib.pyplot as plt
import random
from keras.layers import Input,Dense,BatchNormalization,Activation,Dropout
from keras.models import Model
from keras import losses
from keras.optimizers import SGD,Adam
import keras
import math as mt
from time import time
from tensorflow.python.keras.callbacks import TensorBoard

"""  datos iniciales"""


ang_c=29
angulo=0.1

ni=1

no=1.6589
ne=1.5430

go=0
ge=0
eo=no*no
ee=ne*ne

thick= 3
lamda= 853*10**-6

sens=10**-8


M_exp=np.zeros((4,4),dtype=complex)

M_exp[0][0]=1
M_exp[0][1]= -0.0142
M_exp[0][2]=-0.0516
M_exp[0][3]=-0.0106
M_exp[1][0]=-0.0161
M_exp[1][1]=0.9753   
M_exp[1][2]= 0.1540
M_exp[1][3]=-0.0359
M_exp[2][0]=0.0015
M_exp[2][1]=0.0955 
M_exp[2][2]=0.0259
M_exp[2][3]=0.0062
M_exp[3][0]=0.0019
M_exp[3][1]=-0.0105
M_exp[3][2]=-0.0116
M_exp[3][3]=0.0112

M_KDP=np.zeros((4,4),dtype=complex)

M_KDP[0][0]=1
M_KDP[0][1]=5.09981966e-01
M_KDP[0][2]=7.50900630e-01
M_KDP[0][3]=0
M_KDP[1][0]=7.50355597e-01
M_KDP[1][1]=6.59768851e-01
M_KDP[1][2]=5.51185290e-01
M_KDP[1][3]=0
M_KDP[2][0]=5.10783555e-01
M_KDP[2][1]=2.92114256e-02
M_KDP[2][2]=6.60388652e-01
M_KDP[2][3]=0
M_KDP[3][0]=0
M_KDP[3][1]=0
M_KDP[3][2]=0
M_KDP[3][3]=4.19602954e-01

def var_i(angulo,ang_c):
    ang=angulo*math.pi/180
    ang_c=ang_c*math.pi/180
    ki=np.zeros((3,1),dtype=complex)
    ki[0]=0
    ki[1]=math.sin(ang)
    ki[2]=math.cos(ang)
    
    eje=np.zeros((3,1),dtype=complex)
    eje[0]=0
    eje[1]=math.sin(ang_c)
    eje[2]=math.cos(ang_c)
    
    normal=np.zeros((3,1),dtype=complex)
    normal[2]=1
    
    return normal, eje,ang,ki

normal,eje,ang_i,ki=var_i(angulo,ang_c)
def tensores(no,ne,go,ge,ang_i,eje,normal):
    eo=no*no
    ee=ne*ne
    eDD=np.zeros((3,3),dtype=complex)
    eDD[0][0]=eo
    eDD[1][1]=eo
    eDD[2][2]=ee
    
    gDD=np.zeros((3,3),dtype=complex)
    gDD[0][0]=go
    gDD[1][1]=go
    gDD[2][2]=ge
    
    if eje[0]==0:
        if eje[1]==0:
            alfa=0
            beta=0
        else:
            beta=math.pi/2
            alfa=math.acos(eje[2])
    else:
        alfa = math.acos(np.dot(np.transpose(normal),eje))/(np.linalg.norm(normal)*np.linalg.norm(eje))
        beta =  mt.atan2(eje[1].real,eje[0].real)
#    print(alfa,beta)
    R_1=np.zeros((3,3),dtype=complex)
    R_1[0][0]=math.cos(alfa)
    R_1[0][2]=-math.sin(alfa)
    R_1[1][1]=1
    R_1[2][0]=math.sin(alfa)
    R_1[2][2]=math.cos(alfa)
    
    R_2=np.zeros((3,3),dtype=complex)
    R_2[0][0]=math.cos(beta)
    R_2[0][1]=math.sin(beta)
    R_2[1][0]=-math.sin(beta)
    R_2[1][1]=-math.cos(beta)
    R_2[2][2]=1
    
    R=R_1*R_2
    eD=np.linalg.inv(R)*eDD*R
    gD=np.linalg.inv(R)*gDD*R
    return eD,gD
    

eD,gD=tensores(no,ne,go,ge,ang_i,eje,normal)

def kt_bir(ni,ee,eo,ki,normal,go,ge,eje,sens):
    paso=1
    n=math.sqrt(eo)
    k=1
    while paso>sens:

        
        gamma_t=np.vdot(-ni*ki,normal)+math.sqrt(ni*ni*np.vdot(ki,normal)**2+(n*n-ni*ni))
        
        kt= ni*ki+gamma_t*normal
        kt=kt/np.linalg.norm(kt)
        
        ang_t=math.acos(np.vdot(kt,eje))
        
        eo_p=eo-go**2
        ee_p=ee-ge**2
      
        e=(math.cos(ang_t)**2)*ee_p+(math.sin(ang_t)**2)*eo_p
        
        v=4*ee_p*go*go*math.cos(ang_t)**2+eo_p*(go+ge)*(go+ge)*math.sin(ang_t)**2

        w=((go-ge)**2)*(math.sin(ang_t)**2)*(math.cos(ang_t)**2)

        a=eo_p*(ee_p+e)+v
        b=eo_p**2*(ee_p+e)**2
        c=2*eo_p*v*(ee_p+e)+v**2
        d=4*(e+w)*eo_p**2*ee_p

        no=math.sqrt(b+c-d)
        no=(-no+a)/(2*(e+w))
        no=math.sqrt(no)
        paso=abs(no-n)
        n=no
        
        ne=math.sqrt(b+c-d)
        ne=(ne+a)/(2*(e+w))
        ne=math.sqrt(ne)

        k=k+1
        
    gamma_te=np.dot(np.transpose(-ni*ki),normal)+math.sqrt(ni*ni*np.dot(np.transpose(ki),normal)**2+(ne*ne-ni*ni))
    kte= ni*ki+gamma_te*normal
    kte=kte/np.linalg.norm(kte)
    
    return no,ne,kte,kt,k

no_n,ne_n,kte,kto,k=kt_bir(ni,ee,eo,ki,normal,go,ge,eje,sens)



def campos(kt,n,eG,gD):
    KT=np.zeros((3,3),dtype=complex)
    KT=np.zeros((3,3),dtype=complex)
    KT[0][1]=-kt[2]
    KT[0][2]=kt[1]
    
    KT[1][0]=kt[2]
    KT[1][2]=-kt[0]
    
    KT[2][0]=-kt[1]
    KT[2][1]=kt[0]
    
    M=eG+np.dot(n*KT+1j*gD,n*KT+1j*gD)
    eigte=np.linalg.eig(M)
    eigte_cs=sorted(abs(eigte[0]))
#    print('')
#    print(eigte_cs)
    he=0
    he_2=0
    E=np.zeros((3,1),dtype=complex)
    for b in range(len(eigte[0])):
        
        if (abs(abs(eigte[0][b])-eigte_cs[0]))<10**-20:
            he=b
        if (abs(abs(eigte[0][b])-eigte_cs[1]))<10**-20:
            he_2=b

    E_=np.zeros((3,1),dtype=complex)
    for a in range(len(E_)):
    
        E[a]=eigte[1][a][he]
        E_[a]=eigte[1][a][he_2]
    
#    if np.linalg.norm(np.dot(M,E))<10**-10:
#        E=E
#    else:
#        E=E_
#        print(1)
    H= np.dot(n*KT+1j*gD,E)
    H_=np.dot(n*KT+1j*gD,E_)
    return E,H,E_,H_

Eto,Hto,Eto_,Hto_=campos(kto,no_n,eD,gD)
Ete,Hte,Ete_,Hte_=campos(kte,ne_n,eD,gD)

#if abs(np.vdot(Eto,Ete))>0.8:
#    Eto=Eto_
#    Hto=Hto_
#    
if abs(np.dot(np.transpose(Eto),Ete).real-1)<=10**-10 or np.dot(np.transpose(Eto),Ete).real>1:
    if np.vdot(Ete,Ete_)==0:
        Ete=Ete_
    else:
        Eto=Eto_
if abs(np.dot(np.transpose(Hto),Hte).real-1)<=10**-10 or np.dot(np.transpose(Hto),Hte).real>1:
    if np.vdot(Hte,Hte_)==0:
        Hte=Hte_
    else:
        Hto=Hto_

def kr_nbir(ni,ki,normal,Ei):
    kr=ni*ki-2*ni*np.dot(np.transpose(ki),normal)*normal
    kr=kr/np.linalg.norm(kr)

    if np.linalg.norm(np.cross(np.transpose(kr),np.transpose(normal))[0])==0:
        q=np.zeros((3,1),dtype=complex)
        q[0]=1

    else:
        q=kr
    Ers=np.cross(np.transpose(q),np.transpose(normal))[0]
    Ers=Ers/np.linalg.norm(Ers)
    
    Erp=np.cross(np.transpose(kr),Ers)[0]
     
    Hrs=np.cross(np.transpose(ni*kr),Ers)[0]
    Hrp=np.cross(np.transpose(ni*kr),Erp)[0]
    
    Hi=np.cross(np.transpose(ni*ki),np.transpose(Ei))[0]
    
    return kr,Ers,Erp,Hrs,Hrp,Hi
Ei=np.zeros((3,1),dtype=complex)
Ei[0]=1
Ei[1]=0
Ei[2]=0

Ei_v=np.zeros((3,1),dtype=complex)
Ei_v1=np.cross(np.transpose(ki),np.transpose(Ei))[0]
Ei_v[0]=Ei_v1[0]
Ei_v[1]=Ei_v1[1]
Ei_v[2]=Ei_v1[2]
Ei_v=Ei_v/np.linalg.norm(Ei_v)

kr,Ers,Erp,Hrs,Hrp,Hi=kr_nbir(ni,ki,normal,Ei)

""" calculo OPL"""
def OPL (kto,kte,thick,ne,no,Eto,Ete,Hto,Hte,lam,angulo):
    ang_i=angulo*math.pi/180
#    ang_i=angulo
    phi_to=np.cross(np.transpose(Eto),np.transpose(np.conjugate(Hto)))[0]
    phi_to=phi_to.real
    phi_to=phi_to/np.linalg.norm(phi_to)
    
    phi_te=np.cross(np.transpose(Ete),np.transpose(np.conjugate(Hte)))[0]
    phi_te=phi_te.real
    phi_te=phi_te/np.linalg.norm(phi_te)
    
    ang_lo=math.acos(phi_to[2])
    ang_le=math.asin(phi_te[1])
    
    yto=thick*math.tan(ang_lo)
    yte=thick*math.tan(ang_le)
    
    lo=math.sqrt(yto**2+thick**2)
    le=math.sqrt(yte**2+thick**2)
    OPLo=no*lo*np.vdot(kto,phi_to)
    
    OPLe=ne*le*np.vdot(kte,phi_te)

    OPD=OPLe-OPLo+(yto-yte)*math.sin(ang_i)
    phase=OPD*2*math.pi/lam
#    phase=phase*math.pi/180
    
    return phase,OPD

phase,OPD=OPL(kto,kte,thick,ne_n,no_n,Eto,Ete,Hto,Hte,lamda,angulo)


""" calculo fresnel"""
def Fresnel(ki,Ei,Hi,Eto,Ete,Ero,Ere,Hto,Hte,Hro,Hre):
    q=ki

    if np.linalg.norm(np.cross(np.transpose(q),np.transpose(normal))[0])==0:
        q=np.zeros((3,1),dtype=complex)
        q[1]=1
    s1=np.cross(np.transpose(q),np.transpose(normal))[0]
    s2=np.cross(np.transpose(normal),np.transpose(s1))[0]
    
#    print(s1,s2)
    F=np.zeros((4,4),dtype=complex)
    F[0][0]=np.dot(s1,Eto)
    F[0][1]=np.dot(s1,Ete)
    F[0][2]=np.dot(-s1,Ero)
    F[0][3]=np.dot(-s1,Ere)
    F[1][0]=np.dot(s2,Eto)
    F[1][1]=np.dot(s2,Ete)
    F[1][2]=np.dot(-s2,Ero)
    F[1][3]=np.dot(-s2,Ere)
    F[2][0]=np.dot(s1,Hto)
    F[2][1]=np.dot(s1,Hte)
    F[2][2]=np.dot(-s1,Hro)
    F[2][3]=np.dot(-s1,Hre)
    F[3][0]=np.dot(s2,Hto)
    F[3][1]=np.dot(s2,Hte)
    F[3][2]=np.dot(-s2,Hro)
    F[3][3]=np.dot(-s2,Hre)
    
#    print(F.real)
    F_1=np.linalg.inv(F)
    
    F_c=np.zeros((4,1),dtype=complex)
    F_c[0]=np.dot(s1,Ei)
    F_c[1]=np.dot(s2,Ei)
    if np.shape(Hi)==(1,3):
        F_c[2]=np.dot(s1,np.transpose(Hi))
        F_c[3]=np.dot(s2,np.transpose(Hi))
    else:
        F_c[2]=np.dot(s1,Hi)
        F_c[3]=np.dot(s2,Hi)   
    Fi=np.dot(F_1,F_c)

    ato=Fi[0]
    ate=Fi[1]
    aro=Fi[2]
    are=Fi[3]
    
    return ato, ate , aro, are

ato, ate, ars, arp=Fresnel(ki,Ei,Hi,Eto,Ete,Ers,Erp,Hto,Hte,Hrs,Hrp)

"""  segunda interfaz"""


def kr_nobir(ni,ee,eo,ki,normal,go,ge,eje,sens):
    paso=1
    n=math.sqrt(eo)
    k=1
    while paso>sens:

        
        gamma_t=np.vdot(-ni*ki,normal)-math.sqrt(ni*ni*np.vdot(ki,normal)**2+(n*n-ni*ni))
        
        kt= ni*ki+gamma_t*normal
        kt=kt/np.linalg.norm(kt)
        
        ang_t=math.acos(np.vdot(kt,eje))
        
        eo_p=eo-go**2
        ee_p=ee-ge**2
      
        e=(math.cos(ang_t)**2)*ee_p+(math.sin(ang_t)**2)*eo_p
        
        v=4*ee_p*go*go*math.cos(ang_t)**2+eo_p*(go+ge)*(go+ge)*math.sin(ang_t)**2

        w=((go-ge)**2)*(math.sin(ang_t)**2)*(math.cos(ang_t)**2)
        
        a=eo_p*(ee_p+e)+v
        b=eo_p**2*(ee_p+e)**2
        c=2*eo_p*v*(ee_p+e)+v**2
        d=4*(e+w)*eo_p**2*ee_p
        
        no=math.sqrt(b+c-d)
        no=(-no+a)/(2*(e+w))
        no=math.sqrt(no)
        paso=abs(no-n)
        n=no
        
        ne=math.sqrt(b+c-d)
        ne=(ne+a)/(2*(e+w))
        ne=math.sqrt(ne)
        
        k=k+1
        
    gamma_te=np.dot(np.transpose(-ni*ki),normal)-math.sqrt(ni*ni*np.dot(np.transpose(ki),normal)**2+(ne*ne-ni*ni))
    kte= ni*ki+gamma_te*normal
    kte=kte/np.linalg.norm(kte)
    
    return no,ne,kte,kt

noo,noe,kroe,kroo=kr_nobir(no_n,ee,eo,kto,normal,go,ge,eje,sens)
neo,nee,kree,kreo=kr_nobir(ne_n,ee,eo,kte,normal,go,ge,eje,sens)

Eroo,Hroo,Eroo_,Hroo_=campos(kroo,noo,eD,gD)
Eroe,Hroe,Eroe_,Hroe_=campos(kroe,noe,eD,gD)

Ereo,Hreo,Ereo_,Hreo_=campos(kreo,neo,eD,gD)
Eree,Hree,Eree_,Hree_=campos(kree,nee,eD,gD)


def kt_nobir(ni,ki,normal,Ei,nq):
    gamma_t=np.vdot(-ni*ki,normal)+math.sqrt(ni*ni*(np.vdot(ki,normal)**2)+(nq*nq-ni*ni))
    kr=ni*ki+gamma_t*normal
    kr=kr/np.linalg.norm(kr)

    kr=kr/np.linalg.norm(kr)

    if kr[2]==1 or kr[2]==-1:
        q=np.zeros((3,1),dtype=complex)
        q[1]=1
        q[2]=1
        q=q/np.linalg.norm(q)
    else:
        q=kr
#    print(q)
    Ers=np.cross(np.transpose(q),np.transpose(normal))[0]
    Ers=Ers/np.linalg.norm(Ers)
    
    Erp=np.cross(np.transpose(kr),Ers)[0]
     
    Hrs=np.cross(np.transpose(ni*kr),Ers)[0]
    Hrs=Hrs/np.linalg.norm(Hrs)
    Hrp=np.cross(np.transpose(ni*kr),Erp)[0]
    Hrp=Hrp/np.linalg.norm(Hrp)
#    print(Ers)
    return kr,Ers,Erp,Hrs,Hrp
ktto,Etos,Etop,Htos,Htop=kt_nobir(no_n,kto,normal,Eto,ni)
ktte,Etes,Etep,Htes,Htep=kt_nobir(ne_n,kte,normal,Ete,ni)


def Fresnel_bir(ki,Ets,Etp,Hts,Htp,Ero,Ere,Hro,Hre,Ei,Hi):
    q=ki
#    print(ki)
    if np.linalg.norm(np.cross(np.transpose(q),np.transpose(normal))[0])==0 :
        q=np.zeros((3,1),dtype=complex)
        q[1]=1
#        q[2]=1
        q=q/np.linalg.norm(q)
#    print(q)
    s1=np.cross(np.transpose(q),np.transpose(normal))[0]
    s2=np.cross(np.transpose(normal),np.transpose(s1))[0]
    

    F=np.zeros((4,4),dtype=complex)
    F[0][0]=np.dot(s1,Ets)
    F[0][2]=np.dot(-s1,Ero)
    F[0][3]=np.dot(-s1,Ere)
    
    F[1][1]=np.dot(s2,Etp)
    F[1][2]=np.dot(-s2,Ero)
    F[1][3]=np.dot(-s2,Ere)
    
    F[2][1]=np.dot(s1,Htp)
    F[2][2]=np.dot(-s1,Hro)
    F[2][3]=np.dot(-s1,Hre)
    
    F[3][0]=np.dot(s2,Hts)
    F[3][2]=np.dot(-s2,Hro)
    F[3][3]=np.dot(-s2,Hre)
    
    
    F_c=np.zeros((4,1),dtype=complex)
    F_c[0]=np.dot(s1,Ei)
    F_c[1]=np.dot(s2,Ei)
    if np.shape(Hi)==(1,3):
        F_c[2]=np.dot(s1,np.transpose(Hi))
        F_c[3]=np.dot(s2,np.transpose(Hi))
    else:
        F_c[2]=np.dot(s1,Hi)
        F_c[3]=np.dot(s2,Hi)   
  
    F_1=np.linalg.inv(F)

    Fi=np.dot(F_1,F_c)

    ats=Fi[0]
    atp=Fi[1]
    aro=Fi[2]
    are=Fi[3]
    
    return ats, atp , aro, are
if abs(np.dot(np.transpose(Hroe),Hroo).real-1)<=10**-10 or np.dot(np.transpose(Hroe),Hroo).real>1:
    if np.vdot(Hroe,Hroe_)==0:
        Hroe=Hroe_
    else:
        Hroo=Hroo_
if abs(np.dot(np.transpose(Eroe),Eroo).real-1)<=10**-10 or np.dot(np.transpose(Eroe),Eroo).real>1:
    if np.vdot(Eroe,Eroe_)==0:
        Eroe=Eroe_
    else:
        Eroo=Eroo_    
if abs(np.dot(np.transpose(Hree),Hreo).real-1)<=10**-10 or np.dot(np.transpose(Hree),Hreo).real>1:
    if np.vdot(Hree,Hree_)==0:
        Hree=Hree_
    else:
        Hreo=Hreo_  
if abs(np.dot(np.transpose(Eree),Ereo).real-1)<=10**-10 or np.dot(np.transpose(Eree),Ereo).real>1:
    if np.vdot(Eree,Eree_)==0:
        Eree=Eree_
    else:
        Ereo=Ereo_  
    

atos, atop , aroo, aroe=Fresnel_bir(kto,Etos,Etop,Htos,Htop,Eroo,Eroe,Hroo,Hroe,Eto,Hto)

ates, atep , areo, aree=Fresnel_bir(kte,Etes,Etep,Htes,Htep,Ereo,Eree,Hreo,Hree,Ete,Hte)


#print(phase)
Eout_s=ato*atos+ate*ates*math.exp(-1j*phase)
Eout_p=ato*atop+ate*atep*math.exp(-1j*phase)

phase_s=np.angle(Eout_s)
Eout_s=Eout_s/(math.cos(phase_s)+1j*math.sin(phase_s))
Eout_p=Eout_p/(math.cos(phase_s)+1j*math.sin(phase_s))
    
phase_p=np.angle(Eout_p)
Eout_p=Eout_p/(math.cos(phase_p)+1j*math.sin(phase_p))
I=Eout_s**2+Eout_p**2
print(I)


def algoritmo(no,ne,go,ge,ang_i,eje,normal,angulo,ang_c,lamda,thick,sens,ni,Ei):
    normal,eje,ang_i,ki=var_i(angulo,ang_c)
    eD,gD=tensores(no,ne,go,ge,ang_i,eje,normal)
    
    eo=no*no
    ee=ne*ne
    """primera interfaz"""
    no_n,ne_n,kte,kto,k=kt_bir(ni,ee,eo,ki,normal,go,ge,eje,sens)
    
    Eto,Hto,Eto_,Hto_=campos(kto,no_n,eD,gD)
    Ete,Hte,Ete_,Hte_=campos(kte,ne_n,eD,gD)
#    
#    if abs(np.vdot(Eto,Ete))>0.8:
#        Eto=Eto_
#        Hto=Hto_
    if abs(np.dot(np.transpose(Eto),Ete).real-1)<=10**-10 or np.dot(np.transpose(Eto),Ete).real>1:
        if np.vdot(Ete,Ete_)==0:
            Ete=Ete_
        else:
            Eto=Eto_
    if abs(np.dot(np.transpose(Hto),Hte).real-1)<=10**-10 or np.dot(np.transpose(Hto),Hte).real>1:
        if np.vdot(Hte,Hte_)==0:
            Hte=Hte_
        else:
            Hto=Hto_
    kr,Ers,Erp,Hrs,Hrp,Hi=kr_nbir(ni,ki,normal,Ei)
    
    ato, ate, ars, arp=Fresnel(ki,Ei,Hi,Eto,Ete,Ers,Erp,Hto,Hte,Hrs,Hrp)

    phase,OPD=OPL (kto,kte,thick,ne_n,no_n,Eto,Ete,Hto,Hte,lamda,angulo)
    
    """segunda interfaz"""
    noo,noe,kroe,kroo=kr_nobir(no_n,ee,eo,kto,normal,go,ge,eje,sens)
    neo,nee,kree,kreo=kr_nobir(ne_n,ee,eo,kte,normal,go,ge,eje,sens)
    
    Eroo,Hroo,Eroo_,Hroo_=campos(kroo,noo,eD,gD)
    Eroe,Hroe,Eroe_,Hroe_=campos(kroe,noe,eD,gD)

    Ereo,Hreo,Ereo_,Hreo_=campos(kreo,neo,eD,gD)
    Eree,Hree,Eree_,Hree_=campos(kree,nee,eD,gD)
    
    if abs(np.dot(np.transpose(Hroe),Hroo).real-1)<=10**-10 or np.dot(np.transpose(Hroe),Hroo).real>1:
        if np.vdot(Hroe,Hroe_)==0:
            Hroe=Hroe_
        else:
            Hroo=Hroo_
    if abs(np.dot(np.transpose(Eroe),Eroo).real-1)<=10**-10 or np.dot(np.transpose(Eroe),Eroo).real>1:
        if np.vdot(Eroe,Eroe_)==0:
            Eroe=Eroe_
        else:
            Eroo=Eroo_    
    if abs(np.dot(np.transpose(Hree),Hreo).real-1)<=10**-10 or np.dot(np.transpose(Hree),Hreo).real>1:
        if np.vdot(Hree,Hree_)==0:
            Hree=Hree_
        else:
            Hreo=Hreo_  
    if abs(np.dot(np.transpose(Eree),Ereo).real-1)<=10**-10 or np.dot(np.transpose(Eree),Ereo).real>1:
        if np.vdot(Eree,Eree_)==0:
            Eree=Eree_
        else:
            Ereo=Ereo_   
    ktto,Etos,Etop,Htos,Htop=kt_nobir(no_n,kto,normal,Eto,ni)
    ktte,Etes,Etep,Htes,Htep=kt_nobir(ne_n,kte,normal,Ete,ni)


    
    atos, atop , aroo, aroe=Fresnel_bir(kto,Etos,Etop,Htos,Htop,Eroo,Eroe,Hroo,Hroe,Eto,Hto)

    ates, atep , areo, aree=Fresnel_bir(kte,Etes,Etep,Htes,Htep,Ereo,Eree,Hreo,Hree,Ete,Hte)


    Eout_s=ato*atos+ate*ates*math.exp(-1j*phase)
    Eout_p=ato*atop+ate*atep*math.exp(-1j*phase)

    phase_s=np.angle(Eout_s)
    Eout_s=Eout_s/(math.cos(phase_s)+1j*math.sin(phase_s))
    Eout_p=Eout_p/(math.cos(phase_s)+1j*math.sin(phase_s))
    
    phase_p=np.angle(Eout_p)
    Eout_p=Eout_p/(math.cos(phase_p)+1j*math.sin(phase_p))
    I=Eout_s**2+Eout_p**2
#    if I>=1:
#        print('esta malisimo')
    return Eout_s,Eout_p

a,b=algoritmo(no,ne,go,ge,ang_i,eje,normal,angulo,ang_c,lamda,thick,sens,ni,Ei)

def alg_6_Ei(no,ne,go,ge,ang_i,eje,normal,angulo,ang_c,lamda,thick,sens,ni):

    Ei_h=np.zeros((3,1),dtype=complex)
    Ei_v=np.zeros((3,1),dtype=complex)
    Ei_dia=np.zeros((3,1),dtype=complex)
    Ei_ant=np.zeros((3,1),dtype=complex)
    Ei_cd=np.zeros((3,1),dtype=complex)
    Ei_ci=np.zeros((3,1),dtype=complex)
    
    ang=angulo*math.pi/180
    ki=np.zeros((3,1),dtype=complex)
    ki[0]=0
    ki[1]=math.sin(ang)
    ki[2]=math.cos(ang)
    
    Ei_h[0]=1
    Ei_h[1]=0
    Ei_h=Ei_h/np.linalg.norm(Ei_h)
    
    Ei_v1=np.cross(np.transpose(ki),np.transpose(Ei_h))[0]
    Ei_v[0]=Ei_v1[0]
    Ei_v[1]=Ei_v1[1]
    Ei_v[2]=Ei_v1[2]
    Ei_v=Ei_v/np.linalg.norm(Ei_v)
    
    Ei_dia=Ei_h+Ei_v
    Ei_dia=Ei_dia/np.linalg.norm(Ei_dia)
    
    Ei_ant=-Ei_h+Ei_v
    Ei_ant=Ei_ant/np.linalg.norm(Ei_ant)
    
    Ei_cd=Ei_h-1j*Ei_v
    Ei_cd=Ei_cd/np.linalg.norm(Ei_cd)
    
    
    Ei_ci=Ei_h+1j*Ei_v
    Ei_ci=Ei_ci/np.linalg.norm(Ei_ci)
    
    
    Ei_t=[]
    Ei_t.append(Ei_h)
    Ei_t.append(Ei_v)
    Ei_t.append(Ei_dia)
    Ei_t.append(Ei_ant)
    Ei_t.append(Ei_cd)
    Ei_t.append(Ei_ci)
    
    J_in=np.zeros((2,6),dtype=complex)
    J_in[0][0]=Ei_h[0]
    J_in[1][0]=Ei_h[1]
    J_in[0][1]=Ei_v[0]
    J_in[1][1]=Ei_v[1]
    J_in[0][2]=Ei_dia[0]
    J_in[1][2]=Ei_dia[1]
    J_in[0][3]=Ei_ant[0]
    J_in[1][3]=Ei_ant[1]
    J_in[0][4]=Ei_cd[0]
    J_in[1][4]=Ei_cd[1]    
    J_in[0][5]=Ei_ci[0]
    J_in[1][5]=Ei_ci[1]  
    
    Jin_i=np.linalg.pinv(J_in)
    
    U=np.zeros((4,4),dtype=complex)
    U[0][0]=1
    U[0][3]=1
    U[1][0]=1
    U[1][3]=-1
    U[2][1]=1
    U[2][2]=1
    U[3][1]=1j
    U[3][2]=-1j
    U=U/math.sqrt(2)
    
    pol_p=[]
    pol_s=[]
    for a in range(6):
        Ei=Ei_t[a]
        M,N=algoritmo(no,ne,go,ge,ang_i,eje,normal,angulo,ang_c,lamda,thick,sens,ni,Ei)
    #    if M>1:
    #        M=trans[a-1]
        pol_s.append(M)
        pol_p.append(N)
        

    J_out=np.zeros((2,6),dtype=complex)
    
    J_out[0][0]=pol_s[0]
    J_out[1][0]=pol_p[0]
    J_out[0][1]=pol_s[1]
    J_out[1][1]=pol_p[1]
    J_out[0][2]=pol_s[2]
    J_out[1][2]=pol_p[2]
    J_out[0][3]=pol_s[3]
    J_out[1][3]=pol_p[3]
    J_out[0][4]=pol_s[4]
    J_out[1][4]=pol_p[4]    
    J_out[0][5]=pol_s[5]
    J_out[1][5]=pol_p[5]
    
#    print(J_out)
    J=np.dot(J_out,Jin_i)
    
    M=np.zeros((4,4))



    
    Tens_i=np.kron(J,np.conjugate(J))
    M=np.dot(np.dot(U,Tens_i),np.linalg.inv(U))
    M=M/np.max(M)

    return M

M_teo=alg_6_Ei(no,ne,go,ge,ang_i,eje,normal,angulo,ang_c,lamda,thick,sens,ni)




val_red=[]
M_red=[]
datos_totales=1000000
for a in range(datos_totales):
    no=random.uniform(1.6,1.7)    
    ne=random.uniform(1.5,1.6)
    
    thick=random.uniform(3,3)
    angulo=random.uniform(0.1,0.1)
    ang_c=random.uniform(27,33)
    
    no=int(no*10000)/10000
    ne=int(ne*10000)/10000
    thick=int(thick*100)/100

    ang_c=int(ang_c*10)/10
    
    if no==ne:
        ne=ne+random.uniform(-0.3,0.3)

    M=alg_6_Ei(no,ne,go,ge,ang_i,eje,normal,angulo,ang_c,lamda,thick,sens,ni)
    no=no*10
    ne=ne*10
    thick=thick*10   
    val_red.append([no,ne,ang_c])

    M_red.append((M.real).reshape(1,16)[0])



val_val=[]
M_val=[]

for a in range(int(datos_totales*0.3)):
    no=random.uniform(1.6,1.7)    
    ne=random.uniform(1.5,1.6)

    thick=random.uniform(3,3)
    angulo=random.uniform(0.1,0.1)
    ang_c=random.uniform(27,33)
    
    no=int(no*10000)/10000
    ne=int(ne*10000)/10000
    thick=int(thick*100)/100

    ang_c=int(ang_c*10)/10
    if no==ne:
        ne=ne+random.uniform(-0.3,0.3)
        print(1)
    
    M=alg_6_Ei(no,ne,go,ge,ang_i,eje,normal,angulo,ang_c,lamda,thick,sens,ni)  
    no=no*10
    ne=ne*10
    thick=thick*10
    val_val.append([no,ne,ang_c])

    M_val.append((M.real).reshape(1,16)[0]) 

    
